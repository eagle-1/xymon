Install Clustered Hobbit Server
===============================


This was contributed by Brian Lynch <brianlynch (at) gmail.com> 
If you have any questions, I suggest that you raise them on
the Hobbit mailing list.



Install Clustered Hobbit Server

Caveats:
1. Example is done on 64-bit Redhat Fedora Core 3 systems.
2. The author loves to install everything in /opt
3. Network addresses and hostnames were changed to protect the innocent. You'll need to change these to match your network.
4. '------------------------------------------------------------' marks the begin and end of file content
5. This is a 'complete' install including Apache, fping, etc.
6. This should work on other OS's, but the author hasn't personally tested it anywhere else. 
7. This configuration is Active/Passive with one backup waiting for the primary to fail
8. Read through the scripts carefully as items such as smtp setup and machine ip/names will need to change. 

Requirements: 

1. 2 similar boxes (this example uses Linux on Sun V20z's) setup with hostnames and network addresses (see Notes below).
2. At least one network interface. 2 is ideal so that you can have a dedicated crossover cable heartbeat between the systems. 
3. Enough time and patience to get through the doc, let alone the install. 


Notes:
1. 192.168.1.1 is the default route for the network
2. 192.168.1.146 and 192.168.1.148 are the ip addresses of host1.yourdomain.com and host2.yourdomain.com respectively
3. 192.168.1.150 is the clustered address with the DNS of monitor.yourdomain.com.  This address should be in the bb-hosts file with the following entries. All bb clients will send to this host as the primary. Note that the 2 individual hosts are considered 'normal' monitored hosts, while the clustered identity is the BBDISPLAY/BBPAGER/BBNET, etc.


192.168.1.150   monitor.yourdomain.com      # BBDISPLAY BBPAGER BBNET bbd http://monitor.yourdomain.com/
192.168.1.146   host1.yourdomain.com	    #
192.168.1.148   host2.yourdomain.com

4. Users include:
- monitor with group monitor : this user runs hobbit and the web server
- hacluster with group haclient : this user runs the cluster daemons, etc. 

5. This document is subject to change as the install is still being thoroughly tested. 


HEARTBEAT 
***************************

BUILD: 

heartbeat-1.2.3

> ./configure --prefix=/opt/heartbeat-1.2.3 --with-initdir=/etc/init.d --with-group-name=haclient --with-group-id=502 --with-ccmuser-name=hacluster --with-ccuser-id=502 --with-pic
> make
> make install

* These changes need to be made in order for everything to work properly

Heartbeat permissions

> chmod o+rx /opt/heartbeat
> chmod o+rx /opt/heartbeat/lib
> chmod u+s /opt/heartbeatbeat/lib/heartbeat/ipfail
> chmod u+s /opt/heartbeatbeat/lib/heartbeat/ccm
> chmod u+s /opt/heartbeatbeat/lib/heartbeat/ccm_testclient

CCM Setup
> mkdir -p /var/lib/heartbeat/ccm

CONFIG FILES: 

/opt/heartbeat/etc/ha.d/authkeys (IDENTICAL ON BOTH SERVERS)
------------------------------------------------------------
auth 1
1 sha1 "[your password]"
2 md5 "[your password]"
3 crc
------------------------------------------------------------

/opt/heartbeat/etc/ha.d/haresources (IDENTICAL)
------------------------------------------------------------
#
# Monitoring Resources Configuration File
#

# Hobbit/Scripting resource
host1.yourdomain.com IPaddr::192.168.1.150/8/eth0 hobbit mirror mon MailTo::youremail@yourdomain.com::HobbitFailOver


------------------------------------------------------------

/opt/heartbeat/etc/ha.d/ha.cf (PRIMARY SERVER):
------------------------------------------------------------
# HA Config File: monitoring infrastructure
#

# Logging
debugfile /var/log/ha-debug
debug 1

logfile /var/log/ha-log

# Global HA Configuration
keepalive 2
deadtime 30
warntime 30

initdead 120

udpport 694

# Interfaces for broadcast heartbeats
bcast   eth2

# Multicast heartbeats
# mcast eth0 225.0.0.1 694 1 0

# Unicast heartbeats
ucast eth0 192.168.1.148
ucast eth2 172.16.0.2

# Failback automatically
auto_failback on

# Nodes
node    host1.yourdomain.com
node    host2.yourdomain.com

# Processes started and stopped with heartbeat
respawn hacluster /opt/heartbeat/lib/heartbeat/ipfail
respawn hacluster /opt/heartbeat/lib/heartbeat/ccm -d

# ipfail configuration
ping 192.168.1.1

deadping 30

apiauth ipfail uid=hacluster,root
apiauth ccm uid=hacluster,root
apiauth ping gid=haclient uid=blynch,root
apiauth default gid=haclient

# coredumps true
# coreroot /tmp/cores
------------------------------------------------------------

/opt/heartbeat/etc/ha.d/ha.cf (SECONDARY SERVER):
------------------------------------------------------------
# HA Config File: monitoring infrastructure
#

# Logging
debugfile /var/log/ha-debug
debug 1

logfile /var/log/ha-log

# Global HA Configuration
keepalive 2
deadtime 30
warntime 30

initdead 120

udpport 694

# Interfaces for broadcast heartbeats
bcast   eth2

# Multicast heartbeats
# mcast eth0 225.0.0.1 694 1 0

# Unicast heartbeats
ucast eth0 192.168.1.146
ucast eth2 172.16.0.1

# Failback automatically
auto_failback on

# Nodes
node    host1.yourdomain.com
node    host2.yourdomain.com

# Processes started and stopped with heartbeat
respawn hacluster /opt/heartbeat/lib/heartbeat/ipfail
respawn hacluster /opt/heartbeat/lib/heartbeat/ccm -d

# ipfail configuration
ping 192.168.1.1 

deadping 30

apiauth ipfail uid=hacluster,root
apiauth ccm uid=hacluster,root
apiauth ping gid=haclient uid=blynch,root
apiauth default gid=haclient

# coredumps true
# coreroot /tmp/cores
------------------------------------------------------------

STARTUP:

> chkconfig --add heartbeat
> chkconfig --level 345 heartbeat on


HOBBIT RESOURCE SCRIPT (different from the normal hobbit start script)
NOTES:  Do not add hobbit to the normal system startup.  It will be handled by the cluster software. 

/opt/heartbeat/etc/ha.d/resource.d/hobbit:
------------------------------------------------------------

#!/bin/sh
#
# Hobbit
#
# Description:  Manages a Hobbit Server as a High-Availability
#               resource
#
#
# Author:       Brian Lynch
#
# An example usage in /etc/ha.d/haresources:
#       node1  10.0.0.170 hobbit
#
# See usage() function below for more details...
#
unset LC_ALL; export LC_ALL
unset LANGUAGE; export LANGUAGE

usage() {
  methods=`hobbit_methods | grep -v methods`
  methods=`echo $methods | tr ' ' '|'`
  cat <<-! >&1
        usage: $0 methods

        $0 manages a Hobbit Server instance as an HA resource.

        The 'start' operation starts the database.
        The 'stop' operation stops the database.
        The 'status' operation reports whether the database is running
        The 'monitor' operation reports whether the database seems to be working
        The 'methods' operation reports on the methods $0 supports

        !
  exit 1

}


prefix=/opt/heartbeat-1.2.3
exec_prefix=/opt/heartbeat-1.2.3
. /opt/heartbeat-1.2.3/etc/ha.d/shellfuncs
# . /etc/ha.d/shellfuncs
SH=/bin/bash


#
# methods: What methods/operations do we support?
#
hobbit_methods() {
  cat <<-!
        start
        stop
        status
        monitor
        methods
        !
}


#
#       Run the given command in the hobbit monitor environment...
#
runasmonitor() {
        su monitor -c "cd /opt/hobbit/server;  $*"
}

#
#       Run a command as the Hobbit User "monitor", and log the output
#
logasmonitor() {
        output=`runasmonitor $*`
        rc=$?
        if
          [ $rc -eq 0 ]
        then
          ha_log "info: $output"
        else
          ha_log "ERROR: $output"
        fi
        return $rc
}

#
# hobbit_start: Start the hobbit server
#
hobbit_start() {
  if
    output=`runasmonitor ./hobbit.sh start`
  then
    : Hurray! Hobbit started OK
    ha_log "info: Hobbit Server started: $output"
  else
    case $output in
      "Hobbit appears to be running"*)
                ha_log "info: Hobbit Server is already running: $output";;

      *)        ha_log "ERROR: $output"; return 1;;
    esac
  fi
  rc=`hobbit_status`
  return $rc;
}

#
# hobbit_stop: Stop the hobbit server
#
hobbit_stop() {
  # We ignore the instance, the info we need is already in $vars
  rc=0
  if
    output=`runasmonitor ./hobbit.sh stop`
  then
    : Hobbit stopped OK
    ha_log "info: Hobbit Server stopped: $output"
  else
    case $output in

      "Hobbit is not running"*)
                ha_log "info: $output";;

      *)        ha_log "ERROR: Hobbit Server stop failed: $output"
                rc=1;;
    esac
  fi
  return $rc
}


#
# hobbit_status: is the hobbit server running?
#
hobbit_status() {
  # We ignore the instance, the info we need is already in $vars
  pscount=`runasmonitor ./hobbit.sh status | grep 'running with PID' | wc -l`
  netstat=`netstat -an | grep LISTEN | grep 1984 | wc -l`
  test $pscount -eq 1 -a $netstat -eq 1
}

#
# hobbit_monitor: Can the given db2 instance do anything useful?
#
hobbit_monitor() {

  CMD="bin/bb monitor 'query monitor,yourdomain,com.hobbitd'; rc=\$?; exit \$rc"

  : Running this command: $CMD

  if
    output=`runasmonitor $CMD`
  then
    : Command succeeded!
  else
    ha_log "Error: Hobbit Server not available: output"
    return 1
  fi
  : ha_log "info: Hobbit Server appears to be running"
}

#
#       'main' starts here...
#

if
  [ $# -le 0 ]
then
  if
    [ "methods" = "$1" ]
  then
    hobbit_methods
    exit $?
  else
    usage
    exit $?
  fi
fi

US=`id -u -n`
US=`echo $US`
if
  [ $US != root -a $US != $1 ]
then
  ha_log "ERROR: $0 must be run as root or $1"
  exit 1
fi

# What kind of method was invoked?
case "$1" in

  start)        hobbit_start
                exit $?;;

  stop)         hobbit_stop
                exit $?;;

  status)       if
                  hobbit_status
                then
                  echo Hobbit Server is running
                  exit 0
                else
                  echo Hobbit Server is stopped
                  exit 1
                fi
                exit $?;;

  monitor)      hobbit_monitor
                exit $?;;

  methods)      hobbit_methods
                exit $?;;
esac

usage
------------------------------------------------------------


RSYNC SETUP

Follow the rsync.txt instructions in /opt/heartbeat/share/docs/heartbeat-1.2.3.

Make the script directory
> mkdir -p /opt/sysadmin/scripts/sync

Create the following scripts. 

/opt/sysadmin/scripts/sync/EnvConfig.pm (Sets up the environment):
------------------------------------------------------------
# Configuration file for all scripts, including host definitions, etc.

package EnvConfig;

#www_host = "wwwdev.domain.com";
$www_host = "wwwint.domain.com";
#www_host = "wwwprod.domain.com";

$sshpath = "/usr/bin/ssh";

$rsyncoptions = "-aurlq --delete";
#$rsyncoptions = "-aurlv";

$smtphost = 'mailhost';

$Debug = 0;
1;
------------------------------------------------------------

/opt/sysadmin/scripts/sync/whohostlib.pm (Functions to figure out if the scripts are running on the cluster master):
------------------------------------------------------------
#!/usr/bin/perl

use strict;
use diagnostics;

package whohostlib;
sub whohost {
    my $other;
    my $me;

    my $x = `grep node /opt/heartbeat/etc/ha.d/ha.cf | sed -e "s/node//g"`;
    my @p = split(' ', $x);
    $me = `hostname -s`;
    chomp $me;

    my @node1_array = split('\.', $p[0]);
    my @node2_array = split('\.', $p[1]);

    my $node1 = $node1_array[0];
    my $node2 = $node2_array[0];

    if($me eq $node1) {
        $other = $node2;
    } else {
        $other = $node1;
    }

    return($me,$other);
}

#By doing "grep mirror haresources", we peel off the line with the info we want...the cluster IP.  Mirror will be added to you haresources later...
sub whostatus {
    my $status = 0;
    my $x = `grep mirror /opt/heartbeat/etc/ha.d/haresources`;
    my @p = split(' ',$x);
    my $ip = $p[1];
    $ip =~ s/IPaddr:://g;
    $x = `/opt/heartbeat/etc/ha.d/resource.d/IPaddr $ip status`;

    # If I am primary, return 1 else return 0
    if ($x =~ /running/) {
       $status = 1;
    } else {
       $status = 0;
    }

    return $status;
}

1; #Return True Value
------------------------------------------------------------

/opt/sysadmin/scripts/sync/kill_synchs.sh (kills sync during a shutdown):
------------------------------------------------------------
#!/bin/sh
ps ax | grep synch | awk {'print $1'} | xargs -n1 kill -9

/opt/sysadmin/scripts/sync/long_synch_all
#!/usr/bin/perl

use strict;
use diagnostics;

use lib "/opt/sysadmin/scripts/sync";
use whohostlib;
use EnvConfig;
use Mail::Sendmail;

#Take care of two-way syncing case during shutdown of one server.  Skips the first try to sync after failover.
if ( -e "/var/lock/subsys/mirrorstop" ) {
    unlink "/var/lock/subsys/mirrorstop";
    exit;
}

# Only sync if serving IP
my $dirname = "";
my $filename = "";

#Get server that this is running on...
my $me = "";
my $other = "";
($me,$other) = whohostlib::whohost;

if (&whohostlib::whostatus() == 1)
{
    #I'm serving!  You want fries with that?

    #Only sync if other node is running heartbeat:
    my $tst = `$EnvConfig::sshpath local-$other /etc/rc.d/init.d/heartbeat status`;
    # For 0.4.9.2 and earlier use  --->    if ($tst =~ /running.../) {
    # For 0.4.9 "beta" versions...
    if ($tst =~ /heartbeat OK/) {
        #make sure previous mirror has completed...

        #To avoid hard link probs over partitions, created /var/lock/subsys/.DONOTREMOVE file
        if (link("/var/lock/subsys/.DONOTREMOVE", "/var/lock/subsys/mirror")) {

        print "running rsync\n";
            # /opt/hobbit/data/ - Data for Hobbit
                my @dirlist = ( "/opt/hobbit/data/" );
                foreach $dirname (@dirlist) {
                    system "/usr/bin/rsync --rsh=$EnvConfig::sshpath $EnvConfig::rsyncoptions $dirname local-$other:$dirname";
            }

            # /opt/hobbit/server/tmp/hobbitd_alert.chk - Checkpoing file for Hobbit Alert Daemon
                my @filelist = ( );
                foreach $filename (@filelist) {
                    system "/usr/bin/rsync --rsh=$EnvConfig::sshpath $EnvConfig::rsyncoptions $filename local-$other:$filename";
                }

            # release rsync process
            unlink "/var/lock/subsys/mirror";
        } else {
        print "next process running before last one completed\n";
            my $ddd = `date`;
            my $subject = "Next RSYNC process starting before previous has completed!\n";
            my $message = $subject.$ddd;

            sendmail ('smtp' => $EnvConfig::smtphost,
                'To' => 'admin@domain.com,admin2@domain.com',
                'From' => 'cluster@domain.com',
                'Reply-To' => 'cluster@domain.com',
                'Subject' => $subject,
                'Message' => $message)
            or warn "Next RSYNC process starting before previous has completed (Couldn't send email)";

            #Try to get to known state by killing all synch procs and removing link...
            unlink "/var/lock/subsys/mirror";
            exec "/opt/sysadmin/scripts/sync/kill_synchs.sh";
            #"kill_synchs.sh is a one liner:  ps ax | grep synch_all | awk {'print $1'} | xargs -n1 kill -9
            exit;
        }
    }
}
------------------------------------------------------------

/opt/sysadmin/script/sync/pagescript.pl (Used to page the admin in the event of a problem): 
------------------------------------------------------------
#!/usr/bin/perl

use lib "/opt/sysadmin/script/sync";
use EnvConfig;
use Mail::Sendmail;

# See how we are called
if($#ARGV == 1)
{
  $mailto = $ARGV[0];
  $subject = $ARGV[1];
}
else
{
  print "Usage: pagescript.pl [email] [subject]\n";
  exit -1;
}

my $ddd = `date`;
my $message = $subject." ".$ddd;

print "Mailto: $mailto\n";
print "Subject: $message\n";

# Send mail to the administrator
sendmail ('smtp' => $EnvConfig::smtphost,
    'To' => '$mailto',
    'From' => 'monitor@yourdomain.com',
    'Reply-To' => 'monitor@yourdomain.com',
    'Subject' => $subject,
    'Message' => $message);

# Log to the HA Log
open(LOG,">>/var/log/ha-log");
print LOG "$message\n";
close LOG;
------------------------------------------------------------



/opt/sysadmin/scripts/sync/synch_all.pl (main synch script ; to be run every 10 minutes):
------------------------------------------------------------
#!/usr/bin/perl

use strict;
use diagnostics;

use lib "/opt/sysadmin/scripts/sync";
use whohostlib;
use EnvConfig;
use Mail::Sendmail;

#Take care of two-way syncing case during shutdown of one server.  Skips the first try to sync after failover.
if ( -e "/var/lock/subsys/mirrorstop" ) {
    unlink "/var/lock/subsys/mirrorstop";
    exit;
}

# Only sync if serving IP
my $dirname = "";
my $filename = "";

#Get server that this is running on...
my $me = "";
my $other = "";
($me,$other) = whohostlib::whohost;

if (&whohostlib::whostatus() == 1)
{
    #I'm serving!  You want fries with that?

    #Only sync if other node is running heartbeat:
    my $tst = `$EnvConfig::sshpath local-$other /etc/rc.d/init.d/heartbeat status`;
    # For 0.4.9.2 and earlier use  --->    if ($tst =~ /running.../) {
    # For 0.4.9 "beta" versions...
    if ($tst =~ /heartbeat OK/) {
        #make sure previous mirror has completed...

        #To avoid hard link probs over partitions, created /var/lock/subsys/.DONOTREMOVE file
        if (link("/var/lock/subsys/.DONOTREMOVE", "/var/lock/subsys/mirror")) {

        print "running rsync\n";
            # /opt/hobbit/server/etc/ - Configuration for Hobbit
            # /opt/hobbit/server/www/ - Build Web Pages for Hobbit
            # /opt/hobbit/server/web/ - Header Files for Hobbit
            # /opt/hobbit/server/ext/ - Executable Files for Hobbit
            # /opt/sysadmin/scripts/sync/ - Synchronization Scripts
                my @dirlist = ( "/opt/hobbit/server/etc/", "/opt/hobbit/server/www/", "/opt/hobbit/server/web/", "/opt/hobbit/server/ext/", "/opt/sysadmin/scripts/sync/");
                foreach $dirname (@dirlist) {
                    system "/usr/bin/rsync --rsh=$EnvConfig::sshpath $EnvConfig::rsyncoptions $dirname local-$other:$dirname";
            }

            # /opt/hobbit/server/tmp/hobbitd.chk - Checkpoint file for Hobbit Daemon
            # /opt/hobbit/server/tmp/hobbitd_alert.chk - Checkpoing file for Hobbit Alert Daemon
                my @filelist = ( "/opt/hobbit/server/tmp/hobbitd.chk", "/opt/hobbit/server/tmp/hobbitd_alert.chk" );
                foreach $filename (@filelist) {
                    system "/usr/bin/rsync --rsh=$EnvConfig::sshpath $EnvConfig::rsyncoptions $filename local-$other:$filename";
                }

            # release rsync process
            unlink "/var/lock/subsys/mirror";
        } else {
        print "next process running before last one completed\n";
            my $ddd = `date`;
            my $subject = "Next RSYNC process starting before previous has completed!\n";
            my $message = $subject.$ddd;

            sendmail ('smtp' => $EnvConfig::smtphost,
                'To' => 'unixadmins@yourdomain.com',
                'From' => 'cluster@monitor.yourdomain.com',
                'Reply-To' => 'cluster@monitor.yourdomain.com',
                'Subject' => $subject,
                'Message' => $message)
            or warn "Next RSYNC process starting before previous has completed (Couldn't send email)";

            #Try to get to known state by killing all synch procs and removing link...
            unlink "/var/lock/subsys/mirror";
            exec "/opt/sysadmin/scripts/sync/kill_synchs.sh";
            #"kill_synchs.sh is a one liner:  ps ax | grep synch_all | awk {'print $1'} | xargs -n1 kill -9
            exit;
        }
    }
}
------------------------------------------------------------

/opt/sysadmin/scripts/sync/long_synch_all.pl (used to sync bigger directories; run every night): 
------------------------------------------------------------
#!/usr/bin/perl

use strict;
use diagnostics;

use lib "/opt/sysadmin/scripts/sync";
use whohostlib;
use EnvConfig;
use Mail::Sendmail;

#Take care of two-way syncing case during shutdown of one server.  Skips the first try to sync after failover.
if ( -e "/var/lock/subsys/mirrorstop" ) {
    unlink "/var/lock/subsys/mirrorstop";
    exit;
}

# Only sync if serving IP
my $dirname = "";
my $filename = "";

#Get server that this is running on...
my $me = "";
my $other = "";
($me,$other) = whohostlib::whohost;

if (&whohostlib::whostatus() == 1)
{
    #I'm serving!  You want fries with that?

    #Only sync if other node is running heartbeat:
    my $tst = `$EnvConfig::sshpath local-$other /etc/rc.d/init.d/heartbeat status`;
    # For 0.4.9.2 and earlier use  --->    if ($tst =~ /running.../) {
    # For 0.4.9 "beta" versions...
    if ($tst =~ /heartbeat OK/) {
        #make sure previous mirror has completed...

        #To avoid hard link probs over partitions, created /var/lock/subsys/.DONOTREMOVE file
        if (link("/var/lock/subsys/.DONOTREMOVE", "/var/lock/subsys/mirror")) {

        print "running rsync\n";
            # /opt/hobbit/data/ - Data for Hobbit
                my @dirlist = ( "/opt/hobbit/data/" );
                foreach $dirname (@dirlist) {
                    system "/usr/bin/rsync --rsh=$EnvConfig::sshpath $EnvConfig::rsyncoptions $dirname local-$other:$dirname";
            }

                my @filelist = ( );
                foreach $filename (@filelist) {
                    system "/usr/bin/rsync --rsh=$EnvConfig::sshpath $EnvConfig::rsyncoptions $filename local-$other:$filename";
                }

            # release rsync process
            unlink "/var/lock/subsys/mirror";
        } else {
        print "next process running before last one completed\n";
            my $ddd = `date`;
            my $subject = "Next RSYNC process starting before previous has completed!\n";
            my $message = $subject.$ddd;

            sendmail ('smtp' => $EnvConfig::smtphost,
                'To' => 'admin@domain.com,admin2@domain.com',
                'From' => 'cluster@domain.com',
                'Reply-To' => 'cluster@domain.com',
                'Subject' => $subject,
                'Message' => $message)
            or warn "Next RSYNC process starting before previous has completed (Couldn't send email)";

            #Try to get to known state by killing all synch procs and removing link...
            unlink "/var/lock/subsys/mirror";
            exec "/opt/sysadmin/scripts/sync/kill_synchs.sh";
            #"kill_synchs.sh is a one liner:  ps ax | grep synch_all | awk {'print $1'} | xargs -n1 kill -9
            exit;
        }
    }
}
------------------------------------------------------------

CRONTAB ENTRIES (setup on both hosts; the script finds the cluster master and only runs there):

# Frequent RSYNC mirror : Tied to the hobbit resource
10,20,30,40,50 * * * * /opt/sysadmin/scripts/sync/synch_all.pl

# Long-running RSYNC mirror : Used for "large" files and done nightly
0 8 * * * /opt/sysadmin/scripts/sync/long_synch_all.pl


INTEGRATION INTO HEARTBEAT

1. Add the 'mirror' script to the resource.d directory.

/opt/heartbeat/etc/ha.d/resource.d/mirror:
------------------------------------------------------------

#!/usr/bin/perl

use lib "/opt/sysadmin/scripts/sync";
use whohostlib;

# See how we were called.
if ($#ARGV == 0) {
    $switch = $ARGV[0];
} else {
    print "Usage: mirror {start|stop|status|restart}\n";
    exit -1;
}

#  start)

if ($switch eq "start") {
    #Make sure to skip first sync.....
    ($me,$other) = whohostlib::whohost;
    system ("/usr/bin/ssh local$me /bin/touch /var/lock/subsys/mirrorstop");
    #Notify admins of startup....
    open (XXX,"/opt/sysadmin/scripts/sync/.pagelist");
    $hh = `hostname`;
    chomp $hh;
    while (<XXX>) {
    chomp;
    system "/opt/sysadmin/scripts/sync/pagescript.pl $_ \"Starting up heartbeat services on node $hh\"";
    }
    close XXX;

} elsif ($switch eq "stop") {
    #stop)

    print "Mirror stop: \n";

    #Am I serving???
    #We'll consider mirror to be "running" if the IP is on this box...
    $x = `grep mirror /opt/heartbeat/etc/ha.d/haresources`;
    @p = split(' ',$x);
    $ip = $p[1];
    $x = `/opt/heartbeat/etc/ha.d/resource.d/IPaddr $ip status`;
    if ($x =~ /running/) {
    #Notify admins of shutdown....
    open (XXX,"/opt/sysadmin/scripts/sync/.pagelist");
    $hh = `hostname`;
    chomp $hh;
    while (<XXX>) {
        chomp;
        system "/opt/sysadmin/scripts/sync/pagescript.pl $_ \"Shutting down heartbeat services on node $hh\"";
    }
    close XXX;

    #You want fries with that?  One last sync to other box, if not in the middle of one now...
    if ( -e "/var/lock/subsys/mirror" ) {
        print "Not syncing, already doing so...\n";
    } else {
        print "Synchronizing data on standby node: \n";
        system "/opt/sysadmin/scripts/sync/synch_all.pl";
    }
    # To prevent NEW master from syncing back to us too soon, lock their first synch_all...
    ($me,$other) = whohostlib::whohost;
    system ("/usr/bin/ssh local$other /bin/touch /var/lock/subsys/mirrorstop");
    }

} elsif ($switch eq "status") {
    #status)
    #We'll consider mirror to be "running" if the IP is on this box...
    $y = `grep mirror /opt/heartbeat/etc/ha.d/haresources`;
    @p = split(' ',$y);
    $ip = $p[1];

    $x = `/opt/heartbeat/etc/ha.d/resource.d/IPaddr $ip status`;
    print $x;
} elsif ($switch eq "restart") {
    #restart)

    system "/opt/heartbeat/etc/ha.d/resource.d/mirror stop";
    system "/opt/heartbeat/etc/ha.d/resource.d/mirror start";

} else {
    print "Usage: mirror {start|stop|status|restart}\n";
}
exit;

------------------------------------------------------------

2. Add the 'mirror' term into the haresources line for hobbit.

# Hobbit/Scripting resource
host1.yourdomain.com IPaddr::192.168.1.150/8/eth0 hobbit mirror mon MailTo::youremail@yourdomain.com::HobbitFailOver


MON SETUP 
***************************
Current Version: mon-0.99.2
> perl -MCPAN -e 'install Time::Period'
> perl -MCPAN -e 'install Time::HiRes'
> perl -MCPAN -e 'install Convert::BER'

Download Mon-0.11
> perl Makefile.PL
> make
> make install

Copy mon-0.99.2 to /opt
> cd /opt
> ln -s mon-0.99.2 mon
> rm CHANGES COPYING COPYRIGHT CREDITS INSTALL KNOWN-PROBLEMS README TODO VERSION mon.lsm

Create new files

/opt/mon/alert.d/bring-ha-down.alert:
------------------------------------------------------------
#!/bin/sh
/opt/mon/alert.d/mail.alert $*
/etc/init.d/heartbeat stop

/opt/mon/etc/mon.cf (main config file for mon):
#
# Example "mon.cf" configuration for "mon".
#
# $Id: clustered_hobbit_installation.txt,v 1.1 2005/05/07 16:04:01 henrik Rel $
#

#
# This works with 0.38pre8
#

#
# global options
#
cfbasedir   = /opt/mon/etc
alertdir    = /opt/mon/alert.d
mondir      = /opt/mon/mon.d
statedir    = /opt/mon/state.d
logdir    = /var/log/mon
dtlogfile = /var/log/mon/downtime
dtlogging = yes
historicfile = /var/log/mon/history
monerrfile = /var/log/mon/errfile
maxprocs    = 20
histlength = 100
randstart = 10s

#
# authentication types:
#   getpwnam      standard Unix passwd, NOT for shadow passwords
#   shadow        Unix shadow passwords (not implemented)
#   userfile      "mon" user file
#
authtype = getpwnam

#
# NB:  hostgroup and watch entries are terminated with a blank line (or
# end of file).  Don't forget the blank lines between them or you lose.
#

#
# group definitions (hostnames or IP addresses)
#
hostgroup monitor 192.168.1.150

#
# Services on the monitor system
#

watch monitor
    service hobbit
        description verify that the hobbit server is running
        interval 1m
        monitor tcp.monitor -p 1984 localhost
        period NORMAL: wd {Sun-Sat}
                alert restart.alert hobbit
                alert mail.alert -S "Hobbit Server Restarted" youremail@yourdomain.com
        period ADVANCED: wd {Sun-Sat}
                alert bring-ha-down.alert -S "Hobbit Server down hard" youremail@yourdomain.com
                upalert mail.alert  -S "Hobbit Server back up" youremail@yourdomain.com
                alertafter 2
                alertevery 1m
------------------------------------------------------------

/opt/mon/alert.d/restart.alert (restarts application):
------------------------------------------------------------
#!/bin/sh
# echo "Input: $0, $1, $2, $3\n" >> /var/log/mon/restarts
echo "Restarting $2\n" >> /var/log/mon/restarts
if [ -f /etc/init.d/$2 ];
then
    /etc/init.d/$2 stop
    /etc/init.d/$2 start
fi
------------------------------------------------------------

/opt/heartbeat/etc/ha.d/resource.d/mon:
------------------------------------------------------------
#!/bin/sh
#
# start/stop the mon server
#
# You probably want to set the path to include
# nothing but local filesystems.
#
# chkconfig: 2345 99 10
# description: mon system monitoring daemon
# processname: mon
# config: /etc/mon/mon.cf
# pidfile: /var/run/mon.pid
#
PATH=/bin:/usr/bin:/sbin:/usr/sbin
export PATH
MON_HOME=/opt/mon

# Source function library.
. /etc/rc.d/init.d/functions

# See how we were called.
case "$1" in
    start)
        echo -n "Starting mon daemon: "
        daemon "$MON_HOME/mon -fc $MON_HOME/etc/mon.cf"
        echo
        touch /var/lock/subsys/mon
        ;;
    stop)
        echo -n "Stopping mon daemon: "
        killproc mon
        echo
        rm -f /var/lock/subsys/mon
        ;;
    status)
        status mon
        ;;
    restart)
        killall -HUP mon
        ;;
    *)
        echo "Usage: mon {start|stop|status|restart}"
        exit 1
esac

exit 0
------------------------------------------------------------

Add the 'mon' statement to the hobbit resource (/opt/heartbeat/etc/ha.d/haresources): 

# Hobbit/Scripting resource
host1.yourdomain.com IPaddr::192.168.1.150/8/eth0 hobbit mirror mon MailTo::youremail@yourdomain.com::HobbitFailOver



LINUX OPENLDAP INSTALLATION
***************************

Current Version: openldap-2.2.24
> ./configure  --prefix=/opt/openldap-2.2.24 --enable-slapd=no --with-pic
> make
> make install
> cd /opt
> ln -s openldap-2.2.24 openldap

LINUX APACHE INSTALLATION
***************************
Current Version: httpd-2.0.54
> ./configure --prefix=/opt/apache2.0.54 --enable-so --enable-info --enable-rewrite --enable-speling --enable-usertrack --enable-deflate --enable-ssl --enable-mime-magic
> make
> make install
> cd /opt
> ln -s apache2.0.54 apache

/etc/init.d/apache:
#!/bin/sh
#
# Copyright (c) 1999 by Sun Microsystems, Inc.
# All rights reserved.
#
#ident  "@(#)apache.sh  1.3     99/11/10 SMI"

APACHE_HOME=/opt/apache
CONF_FILE=/opt/apache/conf/httpd.conf
PIDFILE=/opt/apache/logs/httpd.pid

if [ ! -f ${CONF_FILE} ]; then
        exit 0
fi

START=$1

echo "apache"
case "$1" in
start)
        /bin/rm -f ${PIDFILE}
        cmdtext="starting"
        START=startssl
        ;;
restart)
        cmdtext="restarting"
        START=restart
        ;;
stop)
        cmdtext="stopping"
        START=stop
        ;;
*)
        echo "Usage: $0 {start|stop|restart}"
        exit 1
        ;;
esac

echo "httpd $cmdtext."

status=`${APACHE_HOME}/bin/apachectl $START 2>&1`

if [ $? != 0 ]; then
        echo "$status"
        exit 1
fi
exit 0

/opt/apache/conf/httpd.conf:

#
# Based upon the NCSA server configuration files originally by Rob McCool. # # This is the main Apache server configuration file.  It contains the # configuration directives that give the server its instructions. # See <URL:http://httpd.apache.org/docs-2.0/> for detailed information about # the directives. # # Do NOT simply read the instructions in here without understanding # what they do.  They're here only as hints or reminders.  If you are unsure # consult the online docs. You have been warned.  
#
# The configuration directives are grouped into three basic sections: #  1. Directives that control the operation of the Apache server process as a
#     whole (the 'global environment').
#  2. Directives that define the parameters of the 'main' or 'default' server,
#     which responds to requests that aren't handled by a virtual host.
#     These directives also provide default values for the settings
#     of all virtual hosts.
#  3. Settings for virtual hosts, which allow Web requests to be sent to
#     different IP addresses or hostnames and have them handled by the
#     same Apache server process.
#
# Configuration and logfile names: If the filenames you specify for many # of the server's control files begin with "/" (or "drive:/" for Win32), the # server will use that explicit path.  If the filenames do *not* begin # with "/", the value of ServerRoot is prepended -- so "logs/foo.log" # with ServerRoot set to "/opt/apache2.0.54" will be interpreted by the # server as "/opt/apache2.0.54/logs/foo.log". #

### Section 1: Global Environment
#
# The directives in this section affect the overall operation of Apache, # such as the number of concurrent requests it can handle or where it # can find its configuration files. #

#
# ServerRoot: The top of the directory tree under which the server's # configuration, error, and log files are kept. # # NOTE!  If you intend to place this on an NFS (or otherwise network) # mounted filesystem then please read the LockFile documentation (available # at <URL:http://httpd.apache.org/docs-2.0/mod/mpm_common.html#lockfile>);
# you will save yourself a lot of trouble.
#
# Do NOT add a slash at the end of the directory path.
#
ServerRoot "/opt/apache2.0.54"

#
# The accept serialization lock file MUST BE STORED ON A LOCAL DISK. # <IfModule !mpm_winnt.c> <IfModule !mpm_netware.c> #LockFile logs/accept.lock </IfModule> </IfModule>

#
# ScoreBoardFile: File used to store internal server process information. # If unspecified (the default), the scoreboard will be stored in an # anonymous shared memory segment, and will be unavailable to third-party # applications. # If specified, ensure that no two invocations of Apache share the same # scoreboard file. The scoreboard file MUST BE STORED ON A LOCAL DISK. # <IfModule !mpm_netware.c> <IfModule !perchild.c> #ScoreBoardFile logs/apache_runtime_status </IfModule> </IfModule>


#
# PidFile: The file in which the server should record its process # identification number when it starts. # <IfModule !mpm_netware.c> PidFile logs/httpd.pid </IfModule>

#
# Timeout: The number of seconds before receives and sends time out. # Timeout 300

#
# KeepAlive: Whether or not to allow persistent connections (more than # one request per connection). Set to "Off" to deactivate. # KeepAlive On

#
# MaxKeepAliveRequests: The maximum number of requests to allow # during a persistent connection. Set to 0 to allow an unlimited amount. # We recommend you leave this number high, for maximum performance. # MaxKeepAliveRequests 100

#
# KeepAliveTimeout: Number of seconds to wait for the next request from the # same client on the same connection. # KeepAliveTimeout 15

##
## Server-Pool Size Regulation (MPM specific)
## 

# prefork MPM
# StartServers: number of server processes to start
# MinSpareServers: minimum number of server processes which are kept spare # MaxSpareServers: maximum number of server processes which are kept spare # MaxClients: maximum number of server processes allowed to start # MaxRequestsPerChild: maximum number of requests a server process serves <IfModule prefork.c>
StartServers         5
MinSpareServers      5
MaxSpareServers     10
MaxClients         150
MaxRequestsPerChild  0
</IfModule>

# worker MPM
# StartServers: initial number of server processes to start
# MaxClients: maximum number of simultaneous client connections # MinSpareThreads: minimum number of worker threads which are kept spare # MaxSpareThreads: maximum number of worker threads which are kept spare # ThreadsPerChild: constant number of worker threads in each server process # MaxRequestsPerChild: maximum number of requests a server process serves <IfModule worker.c>
StartServers         2
MaxClients         150
MinSpareThreads     25
MaxSpareThreads     75 
ThreadsPerChild     25
MaxRequestsPerChild  0
</IfModule>

# perchild MPM
# NumServers: constant number of server processes
# StartThreads: initial number of worker threads in each server process # MinSpareThreads: minimum number of worker threads which are kept spare # MaxSpareThreads: maximum number of worker threads which are kept spare # MaxThreadsPerChild: maximum number of worker threads in each server process # MaxRequestsPerChild: maximum number of connections per server process <IfModule perchild.c>
NumServers           5
StartThreads         5
MinSpareThreads      5
MaxSpareThreads     10
MaxThreadsPerChild  20
MaxRequestsPerChild  0
</IfModule>

# WinNT MPM
# ThreadsPerChild: constant number of worker threads in the server process # MaxRequestsPerChild: maximum  number of requests a server process serves <IfModule mpm_winnt.c> ThreadsPerChild 250 MaxRequestsPerChild  0 </IfModule>

# BeOS MPM
# StartThreads: how many threads do we initially spawn?
# MaxClients:   max number of threads we can have (1 thread == 1 client)
# MaxRequestsPerThread: maximum number of requests each thread will process <IfModule beos.c>
StartThreads               10
MaxClients                 50
MaxRequestsPerThread       10000
</IfModule>    

# NetWare MPM
# ThreadStackSize: Stack size allocated for each worker thread # StartThreads: Number of worker threads launched at server startup # MinSpareThreads: Minimum number of idle threads, to handle request spikes # MaxSpareThreads: Maximum number of idle threads # MaxThreads: Maximum number of worker threads alive at the same time # MaxRequestsPerChild: Maximum  number of requests a thread serves. It is 
#                      recommended that the default value of 0 be set for this
#                      directive on NetWare.  This will allow the thread to 
#                      continue to service requests indefinitely.                          
<IfModule mpm_netware.c>
ThreadStackSize      65536
StartThreads           250
MinSpareThreads         25
MaxSpareThreads        250
MaxThreads            1000
MaxRequestsPerChild      0
MaxMemFree             100
</IfModule>

# OS/2 MPM
# StartServers: Number of server processes to maintain
# MinSpareThreads: Minimum number of idle threads per process, 
#                  to handle request spikes
# MaxSpareThreads: Maximum number of idle threads per process
# MaxRequestsPerChild: Maximum number of connections per server process <IfModule mpmt_os2.c>
StartServers           2
MinSpareThreads        5
MaxSpareThreads       10
MaxRequestsPerChild    0
</IfModule>

#
# Listen: Allows you to bind Apache to specific IP addresses and/or # ports, instead of the default. See also the <VirtualHost> # directive. # # Change this to Listen on specific IP addresses as shown below to 
# prevent Apache from glomming onto all bound IP addresses (0.0.0.0) # #Listen 12.34.56.78:80

Listen 80

#
# Dynamic Shared Object (DSO) Support
#
# To be able to use the functionality of a module which was built as a DSO you # have to place corresponding `LoadModule' lines at this location so the # directives contained in it are actually available _before_ they are used. # Statically compiled modules (those listed by `httpd -l') do not need # to be loaded here. # # Example: # LoadModule foo_module modules/mod_foo.so
LoadModule php5_module        modules/libphp5.so
#

#
# ExtendedStatus controls whether Apache will generate "full" status # information (ExtendedStatus On) or just basic information (ExtendedStatus # Off) when the "server-status" handler is called. The default is Off. # #ExtendedStatus On

### Section 2: 'Main' server configuration
#
# The directives in this section set up the values used by the 'main' # server, which responds to any requests that aren't handled by a # <VirtualHost> definition.  These values also provide defaults for # any <VirtualHost> containers you may define later in the file. # # All of these directives may appear inside <VirtualHost> containers, # in which case these default settings will be overridden for the # virtual host being defined. #

<IfModule !mpm_winnt.c>
<IfModule !mpm_netware.c>
#
# If you wish httpd to run as a different user or group, you must run # httpd as root initially and it will switch.  
#
# User/Group: The name (or #number) of the user/group to run httpd as. #  . On SCO (ODT 3) use "User nouser" and "Group nogroup". #  . On HPUX you may not be able to use shared memory as nobody, and the
#    suggested workaround is to create a user www and use that user.
#  NOTE that some kernels refuse to setgid(Group) or semctl(IPC_SET) #  when the value of (unsigned)Group is above 60000; 
#  don't use Group #-1 on these systems!
#
User monitor
Group monitor
</IfModule>
</IfModule>

#
# ServerAdmin: Your address, where problems with the server should be # e-mailed.  This address appears on some server-generated pages, such # as error documents.  e.g. admin@your-domain.com # ServerAdmin youremail@yourdomain.com

#
# ServerName gives the name and port that the server uses to identify itself. # This can often be determined automatically, but we recommend you specify # it explicitly to prevent problems during startup. # # If this is not set to valid DNS name for your host, server-generated # redirections will not work.  See also the UseCanonicalName directive. # # If your host doesn't have a registered DNS name, enter its IP address here. # You will have to access it by its address anyway, and this will make 
# redirections work in a sensible way.
#
#ServerName www.example.com:80

#
# UseCanonicalName: Determines how Apache constructs self-referencing 
# URLs and the SERVER_NAME and SERVER_PORT variables.
# When set "Off", Apache will use the Hostname and Port supplied # by the client.  When set "On", Apache will use the value of the # ServerName directive. # UseCanonicalName Off

#
# DocumentRoot: The directory out of which you will serve your # documents. By default, all requests are taken from this directory, but # symbolic links and aliases may be used to point to other locations. # DocumentRoot "/opt/apache2.0.54/htdocs"

#
# Each directory to which Apache has access can be configured with respect # to which services and features are allowed and/or disabled in that # directory (and its subdirectories). 
#
# First, we configure the "default" to be a very restrictive set of 
# features.  
#
<Directory />
    Options FollowSymLinks
    AllowOverride None
</Directory>

#
# Note that from this point forward you must specifically allow # particular features to be enabled - so if something's not working as # you might expect, make sure that you have specifically enabled it # below. #

#
# This should be changed to whatever you set DocumentRoot to.
#
<Directory "/opt/apache2.0.54/htdocs">

#
# Possible values for the Options directive are "None", "All", # or any combination of:
#   Indexes Includes FollowSymLinks SymLinksifOwnerMatch ExecCGI MultiViews
#
# Note that "MultiViews" must be named *explicitly* --- "Options All" # doesn't give it to you. # # The Options directive is both complicated and important.  Please see # http://httpd.apache.org/docs-2.0/mod/core.html#options
# for more information.
#
    Options Indexes FollowSymLinks

#
# AllowOverride controls what directives may be placed in .htaccess files. # It can be "All", "None", or any combination of the keywords:
#   Options FileInfo AuthConfig Limit
#
    AllowOverride None

#
# Controls who can get stuff from this server.
#
    Order allow,deny
    Allow from all

</Directory>

#
# UserDir: The name of the directory that is appended onto a user's home # directory if a ~user request is received. # UserDir public_html

#
# Control access to UserDir directories.  The following is an example # for a site where these directories are restricted to read-only. # #<Directory /home/*/public_html>
#    AllowOverride FileInfo AuthConfig Limit Indexes
#    Options MultiViews Indexes SymLinksIfOwnerMatch IncludesNoExec
#    <Limit GET POST OPTIONS PROPFIND>
#        Order allow,deny
#        Allow from all
#    </Limit>
#    <LimitExcept GET POST OPTIONS PROPFIND>
#        Order deny,allow
#        Deny from all
#    </LimitExcept>
#</Directory>

#
# DirectoryIndex: sets the file that Apache will serve if a directory # is requested. # # The index.html.var file (a type-map) is used to deliver content- # negotiated documents.  The MultiViews Option can be used for the 
# same purpose, but it is much slower.
#
DirectoryIndex index.php index.html index.html.var

#
# AccessFileName: The name of the file to look for in each directory # for additional configuration directives.  See also the AllowOverride 
# directive.
#
AccessFileName .htaccess

#
# The following lines prevent .htaccess and .htpasswd files from being 
# viewed by Web clients. 
#
<Files ~ "^\.ht">
    Order allow,deny
    Deny from all
</Files>

#
# TypesConfig describes where the mime.types file (or equivalent) is # to be found. # TypesConfig conf/mime.types

#
# DefaultType is the default MIME type the server will use for a document # if it cannot otherwise determine one, such as from filename extensions. # If your server contains mostly text or HTML documents, "text/plain" is # a good value.  If most of your content is binary, such as applications # or images, you may want to use "application/octet-stream" instead to # keep browsers from trying to display binary files as though they are # text. # DefaultType text/plain

#
# The mod_mime_magic module allows the server to use various hints from the # contents of the file itself to determine its type.  The MIMEMagicFile # directive tells the module where the hint definitions are located. # <IfModule mod_mime_magic.c>
    MIMEMagicFile conf/magic
</IfModule>

#
# HostnameLookups: Log the names of clients or just their IP addresses # e.g., www.apache.org (on) or 204.62.129.132 (off). # The default is off because it'd be overall better for the net if people # had to knowingly turn this feature on, since enabling it means that # each client request will result in AT LEAST one lookup request to the # nameserver. # HostnameLookups Off

#
# EnableMMAP: Control whether memory-mapping is used to deliver # files (assuming that the underlying OS supports it). # The default is on; turn this off if you serve from NFS-mounted 
# filesystems.  On some systems, turning it off (regardless of # filesystem) can improve performance; for details, please see # http://httpd.apache.org/docs-2.0/mod/core.html#enablemmap
#
#EnableMMAP off

#
# EnableSendfile: Control whether the sendfile kernel support is 
# used  to deliver files (assuming that the OS supports it).
# The default is on; turn this off if you serve from NFS-mounted 
# filesystems.  Please see
# http://httpd.apache.org/docs-2.0/mod/core.html#enablesendfile
#
#EnableSendfile off

#
# ErrorLog: The location of the error log file.
# If you do not specify an ErrorLog directive within a <VirtualHost> # container, error messages relating to that virtual host will be # logged here.  If you *do* define an error logfile for a <VirtualHost> # container, that host's errors will be logged there and not here. # ErrorLog logs/error_log

#
# LogLevel: Control the number of messages logged to the error_log. # Possible values include: debug, info, notice, warn, error, crit, # alert, emerg. # LogLevel warn

#
# The following directives define some format nicknames for use with # a CustomLog directive (see below). # LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"" combined LogFormat "%h %l %u %t \"%r\" %>s %b" common LogFormat "%{Referer}i -> %U" referer LogFormat "%{User-agent}i" agent

# You need to enable mod_logio.c to use %I and %O
#LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\" %I %O" combinedio

#
# The location and format of the access logfile (Common Logfile Format). # If you do not define any access logfiles within a <VirtualHost> # container, they will be logged here.  Contrariwise, if you *do* # define per-<VirtualHost> access logfiles, transactions will be # logged therein and *not* in this file. # CustomLog logs/access_log common

#
# If you would like to have agent and referer logfiles, uncomment the # following directives. # #CustomLog logs/referer_log referer #CustomLog logs/agent_log agent

#
# If you prefer a single logfile with access, agent, and referer information # (Combined Logfile Format) you can use the following directive. # #CustomLog logs/access_log combined

#
# ServerTokens
# This directive configures what you return as the Server HTTP response # Header. The default is 'Full' which sends information about the OS-Type # and compiled in modules. # Set to one of:  Full | OS | Minor | Minimal | Major | Prod # where Full conveys the most information, and Prod the least. # ServerTokens Full

#
# Optionally add a line containing the server version and virtual host # name to server-generated pages (internal error documents, FTP directory 
# listings, mod_status and mod_info output etc., but not CGI generated 
# documents or custom error documents).
# Set to "EMail" to also include a mailto: link to the ServerAdmin. # Set to one of:  On | Off | EMail # ServerSignature On

#
# Aliases: Add here as many aliases as you need (with no limit). The format is 
# Alias fakename realname
#
# Note that if you include a trailing / on fakename then the server will # require it to be present in the URL.  So "/icons" isn't aliased in this # example, only "/icons/".  If the fakename is slash-terminated, then the 
# realname must also be slash terminated, and if the fakename omits the 
# trailing slash, the realname must also omit it.
#
# We include the /icons/ alias for FancyIndexed directory listings.  If you # do not use FancyIndexing, you may comment this out. # Alias /icons/ "/opt/apache2.0.54/icons/"

<Directory "/opt/apache2.0.54/icons">
    Options Indexes MultiViews
    AllowOverride None
    Order allow,deny
    Allow from all
</Directory>

#
# This should be changed to the ServerRoot/manual/.  The alias provides # the manual, even if you choose to move your DocumentRoot.  You may comment # this out if you do not care for the documentation. # AliasMatch ^/manual(?:/(?:de|en|es|fr|ja|ko|ru))?(/.*)?$ "/opt/apache2.0.54/manual$1"

<Directory "/opt/apache2.0.54/manual">
    Options Indexes
    AllowOverride None
    Order allow,deny
    Allow from all

    <Files *.html>
        SetHandler type-map
    </Files>

    SetEnvIf Request_URI ^/manual/(de|en|es|fr|ja|ko|ru)/ prefer-language=$1
    RedirectMatch 301 ^/manual(?:/(de|en|es|fr|ja|ko|ru)){2,}(/.*)?$ /manual/$1$2 </Directory>

#
# ScriptAlias: This controls which directories contain server scripts. # ScriptAliases are essentially the same as Aliases, except that # documents in the realname directory are treated as applications and # run by the server when requested rather than as documents sent to the client. # The same rules about trailing "/" apply to ScriptAlias directives as to # Alias. # ScriptAlias /cgi-bin/ "/opt/apache2.0.54/cgi-bin/"

<IfModule mod_cgid.c>
#
# Additional to mod_cgid.c settings, mod_cgid has Scriptsock <path> # for setting UNIX socket for communicating with cgid. #
#Scriptsock            logs/cgisock
</IfModule>

#
# "/opt/apache2.0.54/cgi-bin" should be changed to whatever your ScriptAliased # CGI directory exists, if you have that configured. # <Directory "/opt/apache2.0.54/cgi-bin">
    AllowOverride None
    Options None
    Order allow,deny
    Allow from all
</Directory>

#
# Redirect allows you to tell clients about documents which used to exist in # your server's namespace, but do not anymore. This allows you to tell the # clients where to look for the relocated document. # Example: # Redirect permanent /foo http://www.example.com/bar

#
# Directives controlling the display of server-generated directory listings. #

#
# IndexOptions: Controls the appearance of server-generated directory # listings. # IndexOptions FancyIndexing VersionSort

#
# AddIcon* directives tell the server which icon to show for different # files or filename extensions.  These are only displayed for # FancyIndexed directories. # AddIconByEncoding (CMP,/icons/compressed.gif) x-compress x-gzip

AddIconByType (TXT,/icons/text.gif) text/*
AddIconByType (IMG,/icons/image2.gif) image/*
AddIconByType (SND,/icons/sound2.gif) audio/*
AddIconByType (VID,/icons/movie.gif) video/*

AddIcon /icons/binary.gif .bin .exe
AddIcon /icons/binhex.gif .hqx
AddIcon /icons/tar.gif .tar
AddIcon /icons/world2.gif .wrl .wrl.gz .vrml .vrm .iv
AddIcon /icons/compressed.gif .Z .z .tgz .gz .zip
AddIcon /icons/a.gif .ps .ai .eps
AddIcon /icons/layout.gif .html .shtml .htm .pdf
AddIcon /icons/text.gif .txt
AddIcon /icons/c.gif .c
AddIcon /icons/p.gif .pl .py
AddIcon /icons/f.gif .for
AddIcon /icons/dvi.gif .dvi
AddIcon /icons/uuencoded.gif .uu
AddIcon /icons/script.gif .conf .sh .shar .csh .ksh .tcl AddIcon /icons/tex.gif .tex AddIcon /icons/bomb.gif core

AddIcon /icons/back.gif ..
AddIcon /icons/hand.right.gif README
AddIcon /icons/folder.gif ^^DIRECTORY^^
AddIcon /icons/blank.gif ^^BLANKICON^^

#
# DefaultIcon is which icon to show for files which do not have an icon # explicitly set. # DefaultIcon /icons/unknown.gif

#
# AddDescription allows you to place a short description after a file in # server-generated indexes.  These are only displayed for FancyIndexed # directories. # Format: AddDescription "description" filename # #AddDescription "GZIP compressed document" .gz #AddDescription "tar archive" .tar #AddDescription "GZIP compressed tar archive" .tgz

#
# ReadmeName is the name of the README file the server will look for by # default, and append to directory listings. # # HeaderName is the name of a file which should be prepended to # directory indexes. 
ReadmeName README.html
HeaderName HEADER.html

#
# IndexIgnore is a set of filenames which directory indexing should ignore # and not include in the listing.  Shell-style wildcarding is permitted. # IndexIgnore .??* *~ *# HEADER* README* RCS CVS *,v *,t

#
# DefaultLanguage and AddLanguage allows you to specify the language of 
# a document. You can then use content negotiation to give a browser a 
# file in a language the user can understand.
#
# Specify a default language. This means that all data
# going out without a specific language tag (see below) will 
# be marked with this one. You probably do NOT want to set
# this unless you are sure it is correct for all cases.
#
# * It is generally better to not mark a page as 
# * being a certain language than marking it with the wrong
# * language!
#
# DefaultLanguage nl
#
# Note 1: The suffix does not have to be the same as the language # keyword --- those with documents in Polish (whose net-standard # language code is pl) may wish to use "AddLanguage pl .po" to # avoid the ambiguity with the common suffix for perl scripts. # # Note 2: The example entries below illustrate that in some cases 
# the two character 'Language' abbreviation is not identical to 
# the two character 'Country' code for its country,
# E.g. 'Danmark/dk' versus 'Danish/da'.
#
# Note 3: In the case of 'ltz' we violate the RFC by using a three char # specifier. There is 'work in progress' to fix this and get # the reference data for rfc1766 cleaned up. # # Catalan (ca) - Croatian (hr) - Czech (cs) - Danish (da) - Dutch (nl) # English (en) - Esperanto (eo) - Estonian (et) - French (fr) - German (de) # Greek-Modern (el) - Hebrew (he) - Italian (it) - Japanese (ja) # Korean (ko) - Luxembourgeois* (ltz) - Norwegian Nynorsk (nn) # Norwegian (no) - Polish (pl) - Portugese (pt) # Brazilian Portuguese (pt-BR) - Russian (ru) - Swedish (sv) # Simplified Chinese (zh-CN) - Spanish (es) - Traditional Chinese (zh-TW) # AddLanguage ca .ca AddLanguage cs .cz .cs AddLanguage da .dk AddLanguage de .de AddLanguage el .el AddLanguage en .en AddLanguage eo .eo AddLanguage es .es AddLanguage et .et AddLanguage fr .fr AddLanguage he .he AddLanguage hr .hr AddLanguage it .it AddLanguage ja .ja AddLanguage ko .ko AddLanguage ltz .ltz AddLanguage nl .nl AddLanguage nn .nn AddLanguage no .no AddLanguage pl .po AddLanguage pt .pt AddLanguage pt-BR .pt-br AddLanguage ru .ru AddLanguage sv .sv AddLanguage zh-CN .zh-cn AddLanguage zh-TW .zh-tw

#
# LanguagePriority allows you to give precedence to some languages # in case of a tie during content negotiation. # # Just list the languages in decreasing order of preference. We have # more or less alphabetized them here. You probably want to change this. # LanguagePriority en ca cs da de el eo es et fr he hr it ja ko ltz nl nn no pl pt pt-BR ru sv zh-CN zh-TW

#
# ForceLanguagePriority allows you to serve a result page rather than # MULTIPLE CHOICES (Prefer) [in case of a tie] or NOT ACCEPTABLE (Fallback) # [in case no accepted languages matched the available variants] # ForceLanguagePriority Prefer Fallback

#
# Commonly used filename extensions to character sets. You probably # want to avoid clashes with the language extensions, unless you # are good at carefully testing your setup after each change. # See http://www.iana.org/assignments/character-sets for the # official list of charset names and their respective RFCs. # AddCharset ISO-8859-1  .iso8859-1  .latin1 AddCharset ISO-8859-2  .iso8859-2  .latin2 .cen AddCharset ISO-8859-3  .iso8859-3  .latin3 AddCharset ISO-8859-4  .iso8859-4  .latin4 AddCharset ISO-8859-5  .iso8859-5  .latin5 .cyr .iso-ru AddCharset ISO-8859-6  .iso8859-6  .latin6 .arb AddCharset ISO-8859-7  .iso8859-7  .latin7 .grk AddCharset ISO-8859-8  .iso8859-8  .latin8 .heb AddCharset ISO-8859-9  .iso8859-9  .latin9 .trk AddCharset ISO-2022-JP .iso2022-jp .jis AddCharset ISO-2022-KR .iso2022-kr .kis AddCharset ISO-2022-CN .iso2022-cn .cis
AddCharset Big5        .Big5       .big5
# For russian, more than one charset is used (depends on client, mostly):
AddCharset WINDOWS-1251 .cp-1251   .win-1251
AddCharset CP866       .cp866
AddCharset KOI8-r      .koi8-r .koi8-ru
AddCharset KOI8-ru     .koi8-uk .ua
AddCharset ISO-10646-UCS-2 .ucs2
AddCharset ISO-10646-UCS-4 .ucs4
AddCharset UTF-8       .utf8

# The set below does not map to a specific (iso) standard
# but works on a fairly wide range of browsers. Note that
# capitalization actually matters (it should not, but it
# does for some browsers).
#
# See http://www.iana.org/assignments/character-sets
# for a list of sorts. But browsers support few.
#
AddCharset GB2312      .gb2312 .gb 
AddCharset utf-7       .utf7
AddCharset utf-8       .utf8
AddCharset big5        .big5 .b5
AddCharset EUC-TW      .euc-tw
AddCharset EUC-JP      .euc-jp
AddCharset EUC-KR      .euc-kr
AddCharset shift_jis   .sjis

#
# AddType allows you to add to or override the MIME configuration # file mime.types for specific file types. # #AddType application/x-tar .tgz AddType application/x-httpd-php php AddType application/x-httpd-php-source phps

#
# AddEncoding allows you to have certain browsers uncompress
# information on the fly. Note: Not all browsers support this. # Despite the name similarity, the following Add* directives have nothing # to do with the FancyIndexing customization directives above. # #AddEncoding x-compress .Z #AddEncoding x-gzip .gz .tgz # # If the AddEncoding directives above are commented-out, then you # probably should define those extensions to indicate media types: # AddType application/x-compress .Z AddType application/x-gzip .gz .tgz

#
# AddHandler allows you to map certain file extensions to "handlers": # actions unrelated to filetype. These can be either built into the server # or added with the Action directive (see below) # # To use CGI scripts outside of ScriptAliased directories: # (You will also need to add "ExecCGI" to the "Options" directive.) # #AddHandler cgi-script .cgi

#
# For files that include their own HTTP headers:
#
#AddHandler send-as-is asis

#
# For server-parsed imagemap files:
#
#AddHandler imap-file map

#
# For type maps (negotiated resources):
# (This is enabled by default to allow the Apache "It Worked" page #  to be distributed in multiple languages.) # AddHandler type-map var

#
# Filters allow you to process content before it is sent to the client. # # To parse .shtml files for server-side includes (SSI): # (You will also need to add "Includes" to the "Options" directive.) # #AddType text/html .shtml #AddOutputFilter INCLUDES .shtml

#
# Action lets you define media types that will execute a script whenever # a matching file is called. This eliminates the need for repeated URL # pathnames for oft-used CGI file processors. # Format: Action media/type /cgi-script/location # Format: Action handler-name /cgi-script/location #

#
# Customizable error responses come in three flavors:
# 1) plain text 2) local redirects 3) external redirects
#
# Some examples:
#ErrorDocument 500 "The server made a boo boo."
#ErrorDocument 404 /missing.html
#ErrorDocument 404 "/cgi-bin/missing_handler.pl"
#ErrorDocument 402 http://www.example.com/subscription_info.html
#

#
# Putting this all together, we can internationalize error responses. # # We use Alias to redirect any /error/HTTP_<error>.html.var response to # our collection of by-error message multi-language collections.  We use 
# includes to substitute the appropriate text.
#
# You can modify the messages' appearance without changing any of the # default HTTP_<error>.html.var files by adding the line: #
#   Alias /error/include/ "/your/include/path/"
#
# which allows you to create your own set of files by starting with the # /opt/apache2.0.54/error/include/ files and copying them to /your/include/path/, 
# even on a per-VirtualHost basis.  The default include files will display # your Apache version number and your ServerAdmin email address regardless # of the setting of ServerSignature. # # The internationalized error documents require mod_alias, mod_include # and mod_negotiation.  To activate them, uncomment the following 30 lines.

#    Alias /error/ "/opt/apache2.0.54/error/"
#
#    <Directory "/opt/apache2.0.54/error">
#        AllowOverride None
#        Options IncludesNoExec
#        AddOutputFilter Includes html
#        AddHandler type-map var
#        Order allow,deny
#        Allow from all
#        LanguagePriority en cs de es fr it ja ko nl pl pt-br ro sv tr
#        ForceLanguagePriority Prefer Fallback
#    </Directory>
#
#    ErrorDocument 400 /error/HTTP_BAD_REQUEST.html.var
#    ErrorDocument 401 /error/HTTP_UNAUTHORIZED.html.var
#    ErrorDocument 403 /error/HTTP_FORBIDDEN.html.var
#    ErrorDocument 404 /error/HTTP_NOT_FOUND.html.var
#    ErrorDocument 405 /error/HTTP_METHOD_NOT_ALLOWED.html.var
#    ErrorDocument 408 /error/HTTP_REQUEST_TIME_OUT.html.var
#    ErrorDocument 410 /error/HTTP_GONE.html.var
#    ErrorDocument 411 /error/HTTP_LENGTH_REQUIRED.html.var
#    ErrorDocument 412 /error/HTTP_PRECONDITION_FAILED.html.var
#    ErrorDocument 413 /error/HTTP_REQUEST_ENTITY_TOO_LARGE.html.var
#    ErrorDocument 414 /error/HTTP_REQUEST_URI_TOO_LARGE.html.var
#    ErrorDocument 415 /error/HTTP_UNSUPPORTED_MEDIA_TYPE.html.var
#    ErrorDocument 500 /error/HTTP_INTERNAL_SERVER_ERROR.html.var
#    ErrorDocument 501 /error/HTTP_NOT_IMPLEMENTED.html.var
#    ErrorDocument 502 /error/HTTP_BAD_GATEWAY.html.var
#    ErrorDocument 503 /error/HTTP_SERVICE_UNAVAILABLE.html.var
#    ErrorDocument 506 /error/HTTP_VARIANT_ALSO_VARIES.html.var


#
# The following directives modify normal HTTP response behavior to # handle known problems with browser implementations. # BrowserMatch "Mozilla/2" nokeepalive BrowserMatch "MSIE 4\.0b2;" nokeepalive downgrade-1.0 force-response-1.0 BrowserMatch "RealPlayer 4\.0" force-response-1.0 BrowserMatch "Java/1\.0" force-response-1.0 BrowserMatch "JDK/1\.0" force-response-1.0

#
# The following directive disables redirects on non-GET requests for # a directory that does not include the trailing slash.  This fixes a 
# problem with Microsoft WebFolders which does not appropriately handle 
# redirects for folders with DAV methods.
# Same deal with Apple's DAV filesystem and Gnome VFS support for DAV. # BrowserMatch "Microsoft Data Access Internet Publishing Provider" redirect-carefully BrowserMatch "^WebDrive" redirect-carefully BrowserMatch "^WebDAVFS/1.[012]" redirect-carefully BrowserMatch "^gnome-vfs" redirect-carefully

#
# Allow server status reports generated by mod_status,
# with the URL of http://servername/server-status
# Change the ".example.com" to match your domain to enable.
#
#<Location /server-status>
#    SetHandler server-status
#    Order deny,allow
#    Deny from all
#    Allow from .example.com
#</Location>

#
# Allow remote server configuration reports, with the URL of
#  http://servername/server-info (requires that mod_info.c be loaded). # Change the ".example.com" to match your domain to enable. # #<Location /server-info>
#    SetHandler server-info
#    Order deny,allow
#    Deny from all
#    Allow from .example.com
#</Location>


#
# Bring in additional module-specific configurations
#
<IfModule mod_ssl.c>
    Include conf/ssl.conf
</IfModule>


### Section 3: Virtual Hosts
#
# VirtualHost: If you want to maintain multiple domains/hostnames on your # machine you can setup VirtualHost containers for them. Most configurations # use only name-based virtual hosts so the server doesn't need to worry about # IP addresses. This is indicated by the asterisks in the directives below. # # Please see the documentation at 
# <URL:http://httpd.apache.org/docs-2.0/vhosts/>
# for further details before you try to setup virtual hosts.
#
# You may use the command line option '-S' to verify your virtual host # configuration.

#
# Use name-based virtual hosting.
#
#NameVirtualHost *:80

#
# VirtualHost example:
# Almost any Apache directive may go into a VirtualHost container. # The first VirtualHost section is used for requests without a known # server name. # #<VirtualHost *:80>
#    ServerAdmin webmaster@dummy-host.example.com
#    DocumentRoot /www/docs/dummy-host.example.com
#    ServerName dummy-host.example.com
#    ErrorLog logs/dummy-host.example.com-error_log
#    CustomLog logs/dummy-host.example.com-access_log common
#</VirtualHost>

# This file is for Apache 1.3.x and Apache 2.0.x
#
# Add this to your Apache configuration, it makes
# the Hobbit webpages and cgi-scripts available in the
# "/hobbit" and "/hobbit-cgi" URLs.


# NB: The "Alias" line below must NOT be used if you have
#     the Hobbit webfiles as the root URL. In that case,
#     you should instead set this:
#
#          DocumentRoot /opt/hobbit/server/www

Alias /hobbit/  "/opt/hobbit/server/www/"
Alias /hobbit  "/opt/hobbit/server/www/"

<Directory "/opt/hobbit/server/www">
    Options Indexes FollowSymLinks Includes MultiViews
    Order allow,deny
    Allow from all
    AllowOverride AuthConfig

    AuthUserFile /opt/hobbit/server/etc/hobbitpasswd
     AuthType Basic
    AuthName "Security"
    Require user unixadmins
</Directory>

<Directory "/opt/hobbit/server/www/noc">
    Options Indexes Includes MultiViews
    Order allow,deny
    Allow from all

    AuthUserFile /opt/hobbit/server/etc/hobbitpasswd
    AuthType Basic
    AuthName "Security"
    Require user unixadmins operations
</Directory>

<Directory "/opt/hobbit/server/www/dba">
    Options Indexes Includes MultiViews
    Order allow,deny
    Allow from all

    AuthUserFile /opt/hobbit/server/etc/hobbitpasswd
    AuthType Basic
    AuthName "Security"
    Require user unixadmins dba
</Directory>

<Directory "/opt/hobbit/server/www/dev">
    Options Indexes Includes MultiViews
    Order allow,deny
    Allow from all

    AuthUserFile /opt/hobbit/server/etc/hobbitpasswd
    AuthType Basic
    AuthName "Security"
    Require user unixadmins opusteam devteam
</Directory>

<Directory "/opt/hobbit/server/www/eai">
    Options Indexes Includes MultiViews
    Order allow,deny
    Allow from all

    AuthUserFile /opt/hobbit/server/etc/hobbitpasswd
    AuthType Basic
    AuthName "Security"
    Require user unixadmins devteam
</Directory>

<Directory "/opt/hobbit/server/www/menu">
    Options Indexes Includes MultiViews
    Order allow,deny
    Allow from all

    AuthUserFile /opt/hobbit/server/etc/hobbitpasswd
    AuthType Basic
    AuthName "Security"
    Require valid-user
</Directory>

<Directory "/opt/hobbit/server/www/gifs">
    Options Indexes Includes MultiViews
    Order allow,deny
    Allow from all

    AuthUserFile /opt/hobbit/server/etc/hobbitpasswd
    AuthType Basic
    AuthName "Security"
    Require valid-user
</Directory>

ScriptAlias /hobbit-cgi/ "/opt/hobbit/cgi-bin/"
<Directory "/opt/hobbit/cgi-bin">
    AllowOverride None
    Options ExecCGI Includes
    Order allow,deny
    Allow from all
</Directory>

ScriptAlias /hobbit-seccgi/ "/opt/hobbit/cgi-secure/" <Directory "/opt/hobbit/cgi-secure">
    AllowOverride None
    Options ExecCGI Includes
    Order allow,deny
    Allow from all

    # Password file where users with access to these scripts are kept.
    # Create it with "htpasswd -c /opt/hobbit/server/etc/hobbitpasswd USERNAME"
    # Add more users / change passwords with "htpasswd /opt/hobbit/server/etc/hobbitpasswd USERNAME"

    AuthUserFile /opt/hobbit/server/etc/hobbitpasswd
    AuthType Basic
    AuthName "Hobbit Administration"
    Require valid-user
</Directory>

RewriteEngine On

# Rewrite the Big Brother pages as secure
RewriteCond   %{SERVER_PORT}  !^443$
RewriteRule ^/hobbit(.*)$ https://monitor.yourdomain.com/hobbit$1 [L,R] RewriteRule ^/hobbit-seccgi/maint.pl(.*)$ https://monitor.yourdomain.com/hobbit-seccgi/maint.pl$1 [L,R] RewriteRule ^/hobbit-seccgi/hobbit-enadis.sh(.*)$ https://monitor.yourdomain.com/hobbit-seccgi/hobbit-enadis.sh$1 [L,R]


LINUX FPING INSTALLATION
***************************

Current Version: fping-2.4b2_to
> ./configure --prefix=/opt/fping-2.4b2
> make
> make install
> cd /opt
> ln -s fping-2.4b2 fping

CURL INSTALLATION
***************************
Current Version: curl-7.13.2
> ./configure --prefix=/opt/curl-7.13.2 --with-pic --with-ssl
> make
> make install
> cd /opt
> ln -s curl-7.13.2 curl

RRDTOOL INSTALLATION
***************************
Current Version: rrdtool-1.0.49
> ./configure --prefix=/opt/rrdtool-1.0.49 --with-pic
> make
> make install
> cd /opt
> ln -s rrdtool-1.0.49 rrdtool


HOBBIT INSTALLATION 
***************************

Pre-installation steps
1. Install FPING
2. Install openldap
3. Install apache
4. Install curl
5. Create the 'monitor' user and group

Current Version: hobbit-4.0.3rc1

> ./configure --rrdinclude /opt/rrdtool/include --rrdlib /opt/rrdtool/lib --sslinclude /usr/include/openssl --ssllib /usr/lib --ldapinclude /opt/openldap/include --ldaplib /opt/openldap/lib --fping /opt/fping/sbin/fping

Do you want to be able to test SSL-enabled services (y) ? 
> y<return>

Do you want to be able to test LDAP servers (y) ?
> y<return>

Enable experimental support for LDAP/SSL (OpenLDAP 2.x only) (y) ?
> y<return>

# MAKE SURE THE 'monitor' user/group exists prior to installation
What userid will be running Hobbit [hobbit] ?
> monitor <return>

Where do you want the Hobbit installation [/home/monitor] ?
> /opt/hobbit <return>

What URL will you use for the Hobbit webpages [/hobbit] ? 
> <return>

Where to put the Hobbit CGI scripts [/opt/hobbit/cgi-bin] ? 
> <return>

What is the URL for the Hobbit CGI directory [/hobbit-cgi] ? 
> <return>

********************** SECURITY NOTICE ****************************
If your Hobbit server is accessible by outsiders, then you should
restrict access to the CGI scripts that handle enable/disable of
hosts, and acknowledging of alerts. The easiest way to do this is
to put these in a separate CGI directory and require a password to
access them.
If your Hobbit server is on a secure network (Intranet) and you trust
your users, then you can keep all the CGI scripts in one directory.

Where to put the Hobbit Administration CGI scripts [/opt/hobbit/cgi-secure] ?
> <return>

What is the URL for the Hobbit Administration CGI directory [/hobbit-seccgi] ? 
> <return>

** Note that you may need to modify your webserver configuration.
** After installing, see /opt/hobbit/server/etc/hobbit-apache.conf for an example configuration.


To generate Hobbit availability reports, your webserver
must have write-access to a directory below the Hobbit
top-level directory. I can set this up if you tell me
what group-ID your webserver runs with. This is typically
'nobody' or 'apache' or 'www-data'
If you dont know, just hit ENTER and we will handle it later.

What group-ID does your webserver use ?
> monitor <return>

Where to put the Hobbit logfiles [/var/log/hobbit] ? 
> <return>

# Note the use of the clustered hostname
What is the name of this host [host1.yourdomain.com] ?
> monitor.yourdomain.com <return>

What is the IP-address of this host [127.0.0.1] ? 
> 192.168.1.150 <return>

Where should I install the Hobbit man-pages (/usr/local/man) ?
/opt/hobbit/man <return>

The Hobbit history webpage by default displays a 1-day
graph of the history. It can also show a 1-week, 4-weeks and
1-year graphs, or any combination of these.

Which graphs to show by default (1d/1w/4w/1y/all) [all]
> <return>


The Hobbit history webpage can use a new method to
create the summary graphs on the history page. This method
gives a more accurate view (more detailed), but uses a fixed-width
graph instead of the standard Big Brother graph that automatically
resizes to fit your browser window.

Use the new detailed Hobbit history graph (y/n) [y] ? 
> <return>

   Tell me the display width (in pixels) to use for
   the history graph. This could be anything, but to
   eliminate as many rounding errors as possible, it
   is best to use a multiple of 24.
   The default value (960) is good on 1024x768 displays

   What width should I use for the graph [960] ? 
> <return>

Using Linux Makefile settings



Created Makefile with the necessary information to build Hobbit
Some defaults are used, so do look at the Makefile before continuing.

Configuration complete - now run make (GNU make) to build the tools

> make 
> make install

Add the contents of /opt/hobbit/server/etc/hobbit-apache.conf  to /opt/apache/conf/httpd.conf


Start hobbit

> su - monitor
> cd /opt/hobbit/server
> ./hobbit.sh start
