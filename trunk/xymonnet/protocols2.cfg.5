.TH PROTOCOLS2.CFG 5 "Version 4.3.7: 13 Dec 2011" "Xymon"
.SH NAME
protocols2.cfg \- Configuration of TCP network services

.SH SYNOPSIS
.BR $XYMONHOME/etc/protocols2.cfg

.SH DESCRIPTION
\fBprotocols2.cfg\fR contains definitions of how 
.I xymonnet(1)
should test a TCP-based network service (i.e. all common
network services except HTTP and DNS).
For each service, a simple dialogue can be defined to
check that the service is functioning normally, and optional
flags determine if the service requires SSL-, telnet- or any
other special kind of protocol.

.SH FILE FORMAT
protocols2.cfg is a text file. A simple service definition for
the SMTP service would be this:
.br
.sp
   [smtp]
.br
      port 25
.br
      expect:220
.br
      send:helo xymon.com\r\n
.br
      expect:250
.br
      send:mail from:<xymon>\r\n
.br
      expect:250
.br
      send:rset\r\n
.br
      expect:250
.br
      send:quit\r\n
.br
      expect:221
.br
      close
.br

.sp
This defines a service called "smtp". When the connection is
first established, xymonnet will send the string "helo xymon.com" followed by
<CR> and <LF> to the service. It will then expect a response beginning with "250". If
that arrives as expected, it will send "mail from:<xymon>" etc. until it reaches
the "close" command - then the connection is closed and the test is complete.
.sp
The full set of commands available for the protocols2.cfg file are:

.IP "[NAME]"
Define the name of the TCP service, which will also be the column-name
in the resulting display on the test status. If multiple tests share 
a common definition (e.g. ssh, ssh1 and ssh2 are tested identically),
you may list these in a single "[ssh|ssh1|ssh2]" definition,
separating each service-name with a pipe-sign.

.IP "port NUMBER"
Define the default TCP port-number for this service. If no portnumber
is defined,
.I xymonnet2(1)
will attempt to lookup the portnumber in the standard /etc/services 
file.

.IP "send:STRING"
.IP "expect:STRING"
Defines the strings to send to the service after a connection is
established, and the response that is expected.

The send- and expect-strings use standard escaping for non-printable
characters. "\\r" represents a carriage-return (ASCII 13), "\\n"
represents a line-feed (ASCII 10), "\\t" represents a TAB (ASCII 8). 
Binary data is input as "\\xNN" with NN being the hexadecimal value
of the byte.

.IP "read"
Read as much data from the server as is available, but do not look 
for any text pattern in the data. This is used to grab a service
banner, usually just before a "close" command.

.IP "starttls"
Initiate an TLS handshake on the connection. Note that any commands
to tell the remote side that it should start the TLS handshake must
have been sent in advance.

.IP "close"
Close the connection and end the test.

.IP "options option1[,option2][,option3]"
Defines test options. The possible options are
.br
   ssl - service uses SSL/TLS so perform an SSL handshake right after the connection is established.
.br
   telnet - service is telnet, so exchange telnet options
.br
   external - service is tested using an external module, usually via the
.I netmodule(1)
program. xymonnet2 will attempt to connect to the service port, and if 
that succeeds then the test will be handed off to the external module;
if xymonnet2 cannot connect, then the service is reported down.
.br
   ntp - communicate using the NTP protocol
.br
   dns - communicate using the DNS protocol
.br
   udp - service uses UDP instead of TCP

.SH FILES
.BR $XYMONHOME/etc/protocols2.cfg

.SH "SEE ALSO"
xymonnet2(1), netmodule(1)


